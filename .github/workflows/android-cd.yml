name: Android Continuous Delivery

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    name: Build and Release AAB
    runs-on: ubuntu-latest # Use a Linux-based runner

    steps:
      # 1. Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up JDK 17, which is required for modern Android builds
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 3. Decode the Keystore from Base64 (from GitHub Secrets) and write it to a file
      - name: Decode Keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo $KEYSTORE_BASE64 | base64 --decode > ${{ github.workspace }}/release.jks

      # 4. Grant execution permissions to the gradlew script
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 5. Build and sign the Android App Bundle (AAB)
      - name: Build Release AAB
        env:
          # Pass the secrets to the gradle build as environment variables
          KEYSTORE_FILE: ${{ github.workspace }}/release.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: ./gradlew bundleRelease

      # 6. Create a GitHub Release and upload the AAB as an artifact
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # The release will be created from the tag that triggered the workflow
          tag_name: ${{ github.ref_name }}
          # The name of the release will be the tag name
          name: Release ${{ github.ref_name }}
          # Prerelease if you want to test before making it public
          prerelease: false
          # The files to upload to the release
          files: |
            app/build/outputs/bundle/release/app-release.aab